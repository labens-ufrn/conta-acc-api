// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Departament {
  id String @id @default(cuid())

  name String
  sede String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metaData  Json?
  courses   Course[]

  @@map("departaments")
}

model Course {
  id String @id @default(cuid())

  name String

  users    User[]
  students Student[]

  status       Status       @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  metaData     Json?
  resolutions  Resolution[]
  department   Departament  @relation(fields: [departmentId], references: [id])
  departmentId String

  @@map("courses")
}

model Resolution {
  id String @id @default(cuid())

  name        String
  description String?
  link        String?
  isCurrent   Boolean? @default(false)
  totalPoints Int?

  status        Status          @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  metaData      Json?
  courseId      String
  course        Course          @relation(fields: [courseId], references: [id])
  categories    Categories[]
  StudentReview StudentReview[]

  @@map("resolutions")
}

model Categories {
  id String @id @default(cuid())

  name        String
  description String?

  minPoints Int?
  maxPoints Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metaData  Json?

  resolutionId String
  resolution   Resolution             @relation(fields: [resolutionId], references: [id])
  activities   ActivitiesOnCategory[]

  @@map("categories")
}

model ActivitiesOnCategory {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  code        String
  description String?

  workloadSemester Int?
  workloadActivity Int?

  categoryId String
  category   Categories @relation(fields: [categoryId], references: [id])

  activityId     String
  activity       Activities       @relation(fields: [activityId], references: [id])
  ReviewActivity ReviewActivity[]

  @@map("activitiesOnCategories")
}

model Activities {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metaData  Json?

  categories     ActivitiesOnCategory[]
  ReviewActivity ReviewActivity[]

  @@map("activities")
}

model User {
  id String @id @default(cuid())

  name     String
  email    String  @unique
  password String?
  role     Role    @default(STUDENT)

  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime @default(now())
  metaData  Json?

  course   Course?  @relation(fields: [courseId], references: [id])
  courseId String?
  student  Student?

  @@map("users")
}

model Student {
  id String @id @default(cuid())

  enrollId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metaData  Json?

  user   User?  @relation(fields: [userId], references: [id])
  userId String @unique

  course   Course?         @relation(fields: [courseId], references: [id])
  courseId String?
  review   StudentReview[]

  @@map("students")
}

model StudentReview {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metaData  Json?

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  resolutionId String?
  resolution   Resolution? @relation(fields: [resolutionId], references: [id])

  reviewActivity ReviewActivity[]

  @@map("studentReviews")
}

model ReviewActivity {
  id String @id @default(cuid())

  name String?
  link String?

  semester String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metaData  Json?

  studentReviewId String
  studentReview   StudentReview @relation(fields: [studentReviewId], references: [id])

  activityId String
  activity   Activities @relation(fields: [activityId], references: [id])

  activityOnCategoryId String
  activityOnCategory   ActivitiesOnCategory @relation(fields: [activityOnCategoryId], references: [id])

  @@map("reviewActivities")
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED
}

enum Role {
  SYSADMIN
  ADMIN
  COORDINATOR
  STUDENT
}
